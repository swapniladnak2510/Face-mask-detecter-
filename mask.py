# -*- coding: utf-8 -*-
"""Mask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kIGwyBd6Q5yJ3BFiRbQRmuYrSWhzUVnP
"""

! pip install -q kaggle

from google.colab import files
files.upload()

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d ashishjangra27/face-mask-12k-images-dataset

import os
import zipfile
local_zip = '/content/face-mask-12k-images-dataset.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/face-mask-12k-images-dataset')
zip_ref.close()

train_dir=os.path.join('/content/face-mask-12k-images-dataset/Face Mask Dataset/Train')
test_dir=os.path.join('/content/face-mask-12k-images-dataset/Face Mask Dataset/Test')
valid_dir=os.path.join('/content/face-mask-12k-images-dataset/Face Mask Dataset/Validation')

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train=ImageDataGenerator(rescale=(1/255))
test=ImageDataGenerator(rescale=(1/255))
valid=ImageDataGenerator(rescale=(1/255))

train=train.flow_from_directory(
    train_dir,
    target_size=(128,128),
    batch_size=128,
    class_mode='binary'
)
test=test.flow_from_directory(
    test_dir,
    target_size=(128,128),
    batch_size=128,
    class_mode='binary'
)
valid=valid.flow_from_directory(
    valid_dir,
    target_size=(128,128),
    batch_size=128,
    class_mode='binary'
)

model=tf.keras.Sequential([
     tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(128,128,3)),
     tf.keras.layers.MaxPooling2D(3,3),

     tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
     tf.keras.layers.MaxPooling2D(3,3),

     tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
     tf.keras.layers.MaxPooling2D(3,3),

      tf.keras.layers.Flatten(),
      tf.keras.layers.Dense(256,activation='relu'),
      tf.keras.layers.Dense(1,activation='sigmoid')

])

model.summary()

from tensorflow.keras.optimizers import RMSprop
model.compile(
    optimizer=RMSprop(lr=0.001),
    loss='binary_crossentropy',
    metrics=['accuracy']
)

class mycallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self,epochs,logs={}):
    if(logs['accuracy']==1.00):
      print('\nModel reached to final destination')
      self.model.stop_training=True
callbacks=mycallback()

model.fit(
    train,
    epochs=10,
    validation_data=valid,
    callbacks=callbacks,
    verbose=1
)

model.evaluate(test)

from keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
f=files.upload()
for i in f.keys():
  path= '/content/'+i
  x= image.load_img(path,target_size=(128,128))
  img=image.img_to_array(x)
  img = np.expand_dims(img, axis=0)
  images = np.vstack([img])
  classes = model.predict(images, batch_size=10).round()
  print(classes)
  if classes==1:
    plt.imshow(x)
    print('\n')
    print("\033[1m"+" Not weared mask")
  else:
    plt.imshow(x)
    print('\n')
    print('\033[1m'+" Weared mask")

f=files.upload()
for i in f.keys():
  path= '/content/'+i
  x= image.load_img(path,target_size=(128,128))
  img=image.img_to_array(x)
  img = np.expand_dims(img, axis=0)
  images = np.vstack([img])
  classes = model.predict(images, batch_size=10).round()
  print(classes)
  if classes==1:
    plt.imshow(x)
    print('\n')
    print("\033[1m"+" Not weared mask")
  else:
    plt.imshow(x)
    print('\n')
    print('\033[1m'+" Weared mask")

